// <auto-generated />
using System;
using Atlas_Web.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Atlas_Web.Migrations
{
    [DbContext(typeof(Atlas_WebContext))]
    [Migration("20230621162009_FixedSpelling")]
    partial class FixedSpelling
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Atlas_Web.Models.Analytic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AccessDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("Active")
                        .HasColumnType("int");

                    b.Property<int?>("Epic")
                        .HasColumnType("int");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hostname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Href")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PageTime")
                        .HasColumnType("int");

                    b.Property<string>("Pathname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Protocol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Referrer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenHeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenWidth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Search")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double?>("Zoom")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccessDateTime" }, "accessdatetime");

                    b.HasIndex(new[] { "AccessDateTime" }, "accessdatetime_session_width_agent");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "AccessDateTime" }, "accessdatetime_session_width_agent"), new[] { "PageId", "SessionId", "ScreenWidth", "UserAgent" });

                    b.HasIndex(new[] { "UserId", "AccessDateTime" }, "user_access_load_page_session_path");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "UserId", "AccessDateTime" }, "user_access_load_page_session_path"), new[] { "LoadTime", "PageId", "SessionId", "Pathname" });

                    b.HasIndex(new[] { "UserId" }, "userid");

                    b.ToTable("Analytics", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.AnalyticsError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Handled")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LogDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Referrer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.Property<string>("Trace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AnalyticsError", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.AnalyticsTrace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Handled")
                        .HasColumnType("int");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LogDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LogId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Referer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AnalyticsTrace", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.Collection", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectionId"));

                    b.Property<int?>("AnalyticsOwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("DataManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExecutiveOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalDocumentationUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinancialImpact")
                        .HasColumnType("int");

                    b.Property<string>("Hidden")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength();

                    b.Property<int?>("InitiativeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LastUpdateUser")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OperationOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StrategicImportance")
                        .HasColumnType("int");

                    b.HasKey("CollectionId")
                        .HasName("PK__DP_DataP__E8D09D08794EBFAD");

                    b.HasIndex(new[] { "AnalyticsOwnerId" }, "analyticsownerid");

                    b.HasIndex(new[] { "CollectionId" }, "collectionid");

                    b.HasIndex(new[] { "DataManagerId" }, "datamanagerid");

                    b.HasIndex(new[] { "ExecutiveOwnerId" }, "executiveownerid");

                    b.HasIndex(new[] { "FinancialImpact" }, "financialimpact");

                    b.HasIndex(new[] { "InitiativeId" }, "initiativeid");

                    b.HasIndex(new[] { "LastUpdateDate" }, "lastupdatedate");

                    b.HasIndex(new[] { "LastUpdateUser" }, "lastupdateuser");

                    b.HasIndex(new[] { "OperationOwnerId" }, "operationownerid");

                    b.HasIndex(new[] { "StrategicImportance" }, "strategicimportance");

                    b.ToTable("Collection", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.CollectionReport", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LinkId"));

                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.HasKey("LinkId")
                        .HasName("PK__DP_Repor__84AFA7F30D34E922");

                    b.HasIndex("CollectionId");

                    b.HasIndex(new[] { "ReportId", "CollectionId" }, "reportid+collectionid");

                    b.ToTable("CollectionReport", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.CollectionTerm", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LinkId"));

                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.HasKey("LinkId")
                        .HasName("PK__DP_TermA__1BB492E32D415E15");

                    b.HasIndex("CollectionId");

                    b.HasIndex(new[] { "TermId", "CollectionId" }, "termid+collectionid");

                    b.ToTable("CollectionTerm", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.EstimatedRunFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("EstimatedRunFrequency", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.FinancialImpact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("FinancialImpact", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.Fragility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Fragility", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.FragilityTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("FragilityTag", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.GlobalSiteSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GlobalSiteSettings", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.GroupRoleLink", b =>
                {
                    b.Property<int>("GroupRoleLinksId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupRoleLinksId"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserRolesId")
                        .HasColumnType("int");

                    b.HasKey("GroupRoleLinksId")
                        .HasName("PK__GroupRole__LinkId");

                    b.HasIndex("UserRolesId");

                    b.HasIndex(new[] { "GroupId", "UserRolesId" }, "groupid+roleid");

                    b.ToTable("GroupRoleLinks", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.Initiative", b =>
                {
                    b.Property<int>("InitiativeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InitiativeId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExecutiveOwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("FinancialImpact")
                        .HasColumnType("int");

                    b.Property<string>("Hidden")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastUpdateUser")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OperationOwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("StrategicImportance")
                        .HasColumnType("int");

                    b.HasKey("InitiativeId")
                        .HasName("PK__DP_DataI__1EFC948C3A83A845");

                    b.HasIndex(new[] { "ExecutiveOwnerId" }, "executiveownerid");

                    b.HasIndex(new[] { "FinancialImpact" }, "financialimpact");

                    b.HasIndex(new[] { "InitiativeId" }, "initiativeid");

                    b.HasIndex(new[] { "LastUpdateDate" }, "lastupdatedate");

                    b.HasIndex(new[] { "LastUpdateUser" }, "lastupdateuser");

                    b.HasIndex(new[] { "OperationOwnerId" }, "operationownderid");

                    b.HasIndex(new[] { "StrategicImportance" }, "strategicimportance");

                    b.ToTable("Initiative", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.MailConversation", b =>
                {
                    b.Property<int>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConversationId"));

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.HasKey("ConversationId")
                        .HasName("PK__Mail_Con__C050D8770DFC66D7");

                    b.HasIndex("MessageId");

                    b.ToTable("Mail_Conversations", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.MailDraft", b =>
                {
                    b.Property<int>("DraftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DraftId"));

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessagePlainText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MessageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Recipients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReplyToConvId")
                        .HasColumnType("int");

                    b.Property<int?>("ReplyToMessageId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DraftId");

                    b.HasIndex("FromUserId");

                    b.ToTable("Mail_Drafts", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.MailFolder", b =>
                {
                    b.Property<int>("FolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FolderId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentFolderId")
                        .HasColumnType("int");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FolderId")
                        .HasName("PK__Mail_Fol__ACD7107FA5BAA87B");

                    b.HasIndex("UserId");

                    b.ToTable("Mail_Folders", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.MailFolderMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("MessageId");

                    b.ToTable("Mail_FolderMessages", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.MailMessage", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessagePlainText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MessageTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageId")
                        .HasName("PK__Mail_Mes__C87C0C9CF29221A9");

                    b.HasIndex("FromUserId");

                    b.HasIndex("MessageTypeId");

                    b.ToTable("Mail_Messages", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.MailMessageType", b =>
                {
                    b.Property<int>("MessageTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageTypeId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageTypeId")
                        .HasName("PK__Mail_Mes__9BA1E2BAEE19569E");

                    b.ToTable("Mail_MessageType", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.MailRecipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlertDisplayed")
                        .HasColumnType("int");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ToGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ToUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("ToGroupId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Mail_Recipients", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.MailRecipientsDeleted", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlertDisplayed")
                        .HasColumnType("int");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ToGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ToUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ToUserId");

                    b.ToTable("Mail_Recipients_Deleted", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.MaintenanceLog", b =>
                {
                    b.Property<int>("MaintenanceLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenanceLogId"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaintainerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MaintenanceDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MaintenanceLogStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.HasKey("MaintenanceLogId");

                    b.HasIndex("ReportId");

                    b.HasIndex(new[] { "MaintenanceLogId" }, "logid");

                    b.HasIndex(new[] { "MaintainerId" }, "maintainerid");

                    b.HasIndex(new[] { "MaintenanceDate" }, "maintenancedate");

                    b.HasIndex(new[] { "MaintenanceLogStatusId" }, "maintenancelogstatusid");

                    b.ToTable("MaintenanceLog", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.MaintenanceLogStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("MaintenanceLogStatus", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.MaintenanceSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("MaintenanceSchedule", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.OrganizationalValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("OrganizationalValue", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportGroupsMembership", b =>
                {
                    b.Property<int>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembershipId"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLoadDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.HasKey("MembershipId")
                        .HasName("PK__ReportGr__92A786790B03128D");

                    b.HasIndex(new[] { "GroupId", "ReportId" }, "groupid+reportid");

                    b.HasIndex(new[] { "ReportId" }, "reportid");

                    b.ToTable("ReportGroupsMemberships", "dbo");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObject", b =>
                {
                    b.Property<int>("ReportObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReportObjectID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportObjectId"));

                    b.Property<int?>("AuthorUserId")
                        .HasColumnType("int")
                        .HasColumnName("AuthorUserID");

                    b.Property<string>("Availability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultVisibilityYn")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("DefaultVisibilityYN");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EpicMasterFile")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<decimal?>("EpicRecordId")
                        .HasColumnType("numeric(18, 0)")
                        .HasColumnName("EpicRecordID");

                    b.Property<string>("EpicReleased")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<decimal?>("EpicReportTemplateId")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<DateTime?>("LastLoadDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifiedByUserID");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrphanedReportObjectYn")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasColumnName("OrphanedReportObjectYN")
                        .HasDefaultValueSql("('N')")
                        .IsFixedLength();

                    b.Property<string>("ReportObjectBizKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReportObjectTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ReportObjectTypeID");

                    b.Property<string>("ReportObjectUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ReportObjectURL");

                    b.Property<string>("ReportServerCatalogId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ReportServerCatalogID");

                    b.Property<string>("ReportServerPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepositoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Runs")
                        .HasColumnType("int");

                    b.Property<string>("SourceDb")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SourceDB");

                    b.Property<string>("SourceServer")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SourceTable")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ReportObjectId");

                    b.HasIndex(new[] { "AuthorUserId" }, "authorid");

                    b.HasIndex(new[] { "EpicMasterFile" }, "masterfile_report_visiblity_type");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "EpicMasterFile" }, "masterfile_report_visiblity_type"), new[] { "ReportObjectId", "DefaultVisibilityYn", "ReportObjectTypeId" });

                    b.HasIndex(new[] { "EpicMasterFile", "SourceServer", "ReportObjectTypeId" }, "masterfile_sourceserver_type_report");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "EpicMasterFile", "SourceServer", "ReportObjectTypeId" }, "masterfile_sourceserver_type_report"), new[] { "ReportObjectId" });

                    b.HasIndex(new[] { "LastModifiedByUserId" }, "modifiedby");

                    b.HasIndex(new[] { "ReportObjectId" }, "reportid")
                        .IsUnique();

                    b.HasIndex(new[] { "SourceDb", "EpicMasterFile" }, "sourcedb_masterfile_report");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "SourceDb", "EpicMasterFile" }, "sourcedb_masterfile_report"), new[] { "ReportObjectId" });

                    b.HasIndex(new[] { "SourceDb" }, "sourcedb_report_masterfile");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "SourceDb" }, "sourcedb_report_masterfile"), new[] { "ReportObjectId", "EpicMasterFile" });

                    b.HasIndex(new[] { "SourceServer", "EpicMasterFile" }, "sourceserver_masterfile_report");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "SourceServer", "EpicMasterFile" }, "sourceserver_masterfile_report"), new[] { "ReportObjectId" });

                    b.HasIndex(new[] { "SourceServer" }, "sourceserver_report_masterfile");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "SourceServer" }, "sourceserver_report_masterfile"), new[] { "ReportObjectId", "EpicMasterFile" });

                    b.HasIndex(new[] { "SourceServer", "ReportObjectTypeId" }, "sourceserver_type_report");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "SourceServer", "ReportObjectTypeId" }, "sourceserver_type_report"), new[] { "ReportObjectId" });

                    b.HasIndex(new[] { "ReportObjectTypeId", "EpicMasterFile" }, "type_report");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "ReportObjectTypeId", "EpicMasterFile" }, "type_report"), new[] { "ReportObjectId" });

                    b.HasIndex(new[] { "ReportObjectTypeId" }, "type_report_masterfile");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "ReportObjectTypeId" }, "type_report_masterfile"), new[] { "ReportObjectId", "EpicMasterFile", "Name", "DisplayTitle" });

                    b.HasIndex(new[] { "DefaultVisibilityYn", "OrphanedReportObjectYn", "ReportObjectTypeId" }, "visibility + orphan + type");

                    b.HasIndex(new[] { "DefaultVisibilityYn" }, "visibility_report_masterfile");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "DefaultVisibilityYn" }, "visibility_report_masterfile"), new[] { "ReportObjectId", "EpicMasterFile" });

                    b.ToTable("ReportObject", "dbo");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectAttachment", b =>
                {
                    b.Property<int>("ReportObjectAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportObjectAttachmentId"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastLoadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportObjectId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportObjectAttachmentId");

                    b.HasIndex(new[] { "ReportObjectId" }, "reportid");

                    b.ToTable("ReportObjectAttachments", "dbo");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectDoc", b =>
                {
                    b.Property<int>("ReportObjectId")
                        .HasColumnType("int")
                        .HasColumnName("ReportObjectID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeveloperDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeveloperNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoNotPurge")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength();

                    b.Property<string>("EnabledForHyperspace")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength();

                    b.Property<int?>("EstimatedRunFrequencyId")
                        .HasColumnType("int")
                        .HasColumnName("EstimatedRunFrequencyID");

                    b.Property<string>("ExecutiveVisibilityYn")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasColumnName("ExecutiveVisibilityYN")
                        .IsFixedLength();

                    b.Property<int?>("FragilityId")
                        .HasColumnType("int")
                        .HasColumnName("FragilityID");

                    b.Property<string>("GitLabProjectUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GitLabProjectURL");

                    b.Property<string>("Hidden")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength();

                    b.Property<string>("KeyAssumptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("MaintenanceScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("MaintenanceScheduleID");

                    b.Property<int?>("OperationalOwnerUserId")
                        .HasColumnType("int")
                        .HasColumnName("OperationalOwnerUserID");

                    b.Property<int?>("OrganizationalValueId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationalValueID");

                    b.Property<int?>("Requester")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("ReportObjectId")
                        .HasName("PK__ReportOb__B7A74135D2A44EFC");

                    b.HasIndex(new[] { "CreatedBy" }, "createdby");

                    b.HasIndex(new[] { "EstimatedRunFrequencyId" }, "estimatedrunfreqid");

                    b.HasIndex(new[] { "ExecutiveVisibilityYn" }, "execvis_reportid");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "ExecutiveVisibilityYn" }, "execvis_reportid"), new[] { "ReportObjectId" });

                    b.HasIndex(new[] { "FragilityId" }, "fragilityid");

                    b.HasIndex(new[] { "MaintenanceScheduleId" }, "maintenancescheduleid");

                    b.HasIndex(new[] { "MaintenanceScheduleId" }, "maintschedule_report_updated");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "MaintenanceScheduleId" }, "maintschedule_report_updated"), new[] { "ReportObjectId", "LastUpdateDateTime", "UpdatedBy" });

                    b.HasIndex(new[] { "MaintenanceScheduleId" }, "maintschedule_report_updated_created");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "MaintenanceScheduleId" }, "maintschedule_report_updated_created"), new[] { "ReportObjectId", "LastUpdateDateTime", "UpdatedBy", "CreatedDateTime" });

                    b.HasIndex(new[] { "OperationalOwnerUserId" }, "operationalownerid");

                    b.HasIndex(new[] { "OrganizationalValueId" }, "organizationalvalueid");

                    b.HasIndex(new[] { "ReportObjectId" }, "reportid")
                        .IsUnique();

                    b.HasIndex(new[] { "Requester" }, "requester");

                    b.HasIndex(new[] { "UpdatedBy" }, "updatedby");

                    b.ToTable("ReportObject_doc", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectDocFragilityTag", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LinkId"));

                    b.Property<int>("FragilityTagId")
                        .HasColumnType("int");

                    b.Property<int>("ReportObjectId")
                        .HasColumnType("int");

                    b.HasKey("LinkId")
                        .HasName("PK__ReportOb__2D122135B03BB8CE");

                    b.HasIndex("FragilityTagId");

                    b.HasIndex("ReportObjectId");

                    b.ToTable("ReportObjectDocFragilityTags", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectDocTerm", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LinkId"));

                    b.Property<int>("ReportObjectId")
                        .HasColumnType("int");

                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.HasKey("LinkId")
                        .HasName("PK__ReportOb__2D122135AFCD5E79");

                    b.HasIndex("ReportObjectId");

                    b.HasIndex("TermId");

                    b.ToTable("ReportObjectDocTerms", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectHierarchy", b =>
                {
                    b.Property<int>("ParentReportObjectId")
                        .HasColumnType("int")
                        .HasColumnName("ParentReportObjectID");

                    b.Property<int>("ChildReportObjectId")
                        .HasColumnType("int")
                        .HasColumnName("ChildReportObjectID");

                    b.Property<DateTime?>("LastLoadDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Line")
                        .HasColumnType("int");

                    b.HasKey("ParentReportObjectId", "ChildReportObjectId")
                        .HasName("PK__ReportOb__913B66516CC9406D");

                    b.HasIndex(new[] { "ChildReportObjectId" }, "childid");

                    b.HasIndex(new[] { "ParentReportObjectId", "ChildReportObjectId" }, "parent+child");

                    b.HasIndex(new[] { "ParentReportObjectId" }, "parentid");

                    b.ToTable("ReportObjectHierarchy", "dbo");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectImagesDoc", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ImageOrdinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ImageSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportObjectId")
                        .HasColumnType("int");

                    b.HasKey("ImageId")
                        .HasName("PK__ReportOb__7516F4ECD36AFC26");

                    b.HasIndex(new[] { "ReportObjectId" }, "reportid");

                    b.ToTable("ReportObjectImages_doc", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectParameter", b =>
                {
                    b.Property<int>("ReportObjectParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportObjectParameterId"));

                    b.Property<string>("ParameterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportObjectId")
                        .HasColumnType("int");

                    b.HasKey("ReportObjectParameterId");

                    b.HasIndex(new[] { "ReportObjectId" }, "reportobjectid");

                    b.ToTable("ReportObjectParameters", "dbo");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectQuery", b =>
                {
                    b.Property<int>("ReportObjectQueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportObjectQueryId"));

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLoadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Query")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportObjectId")
                        .HasColumnType("int");

                    b.Property<string>("SourceServer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportObjectQueryId");

                    b.HasIndex(new[] { "ReportObjectId" }, "NonClusteredIndex-20220324-104152");

                    b.HasIndex(new[] { "ReportObjectQueryId" }, "queryid");

                    b.HasIndex(new[] { "ReportObjectId" }, "reportobjectid");

                    b.ToTable("ReportObjectQuery", "dbo");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectRunData", b =>
                {
                    b.Property<int>("RunId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RunId"));

                    b.Property<DateTime>("LastLoadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RunDataId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RunDurationSeconds")
                        .HasColumnType("int");

                    b.Property<DateTime>("RunStartTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("RunStartTime_Day")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RunStartTime_Hour")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RunStartTime_Month")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RunStartTime_Year")
                        .HasColumnType("datetime2");

                    b.Property<string>("RunStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RunUserId")
                        .HasColumnType("int")
                        .HasColumnName("RunUserID");

                    b.HasKey("RunId");

                    b.HasIndex(new[] { "RunStatus", "RunStartTime" }, "runstart_status_duration_user");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "RunStatus", "RunStartTime" }, "runstart_status_duration_user"), new[] { "RunDataId", "RunDurationSeconds", "RunUserId" });

                    b.HasIndex(new[] { "RunUserId", "RunStartTime" }, "runstart_user_duration_status");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "RunUserId", "RunStartTime" }, "runstart_user_duration_status"), new[] { "RunDataId", "RunDurationSeconds", "RunStatus" });

                    b.HasIndex(new[] { "RunStatus", "RunStartTime_Day" }, "runstartday_status_duration_user");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "RunStatus", "RunStartTime_Day" }, "runstartday_status_duration_user"), new[] { "RunDataId", "RunDurationSeconds", "RunUserId" });

                    b.HasIndex(new[] { "RunUserId", "RunStartTime_Day" }, "runstartday_user_duration_status");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "RunUserId", "RunStartTime_Day" }, "runstartday_user_duration_status"), new[] { "RunDataId", "RunDurationSeconds", "RunStatus" });

                    b.HasIndex(new[] { "RunStatus", "RunStartTime_Hour" }, "runstarthour_status_duration_user");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "RunStatus", "RunStartTime_Hour" }, "runstarthour_status_duration_user"), new[] { "RunDataId", "RunDurationSeconds", "RunUserId" });

                    b.HasIndex(new[] { "RunUserId", "RunStartTime_Hour" }, "runstarthour_user_duration_status");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "RunUserId", "RunStartTime_Hour" }, "runstarthour_user_duration_status"), new[] { "RunDataId", "RunDurationSeconds", "RunStatus" });

                    b.HasIndex(new[] { "RunStatus", "RunStartTime_Month" }, "runstartmonth_status_duration_user");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "RunStatus", "RunStartTime_Month" }, "runstartmonth_status_duration_user"), new[] { "RunDataId", "RunDurationSeconds", "RunUserId" });

                    b.HasIndex(new[] { "RunUserId", "RunStartTime_Month" }, "runstartmonth_user_duration_status");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "RunUserId", "RunStartTime_Month" }, "runstartmonth_user_duration_status"), new[] { "RunDataId", "RunDurationSeconds", "RunStatus" });

                    b.HasIndex(new[] { "RunStatus", "RunStartTime_Year" }, "runstartyear_status_duration_user");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "RunStatus", "RunStartTime_Year" }, "runstartyear_status_duration_user"), new[] { "RunDataId", "RunDurationSeconds", "RunUserId" });

                    b.HasIndex(new[] { "RunUserId", "RunStartTime_Year" }, "runstartyear_user_duration_status");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "RunUserId", "RunStartTime_Year" }, "runstartyear_user_duration_status"), new[] { "RunDataId", "RunDurationSeconds", "RunStatus" });

                    b.ToTable("ReportObjectRunData", "dbo");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectRunDataBridge", b =>
                {
                    b.Property<int>("BridgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BridgeId"));

                    b.Property<int>("Inherited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ReportObjectId")
                        .HasColumnType("int");

                    b.Property<string>("RunId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Runs")
                        .HasColumnType("int");

                    b.HasKey("BridgeId")
                        .HasName("PK__ReportOb__2D122135AFCD5E790");

                    b.HasIndex("RunId");

                    b.HasIndex(new[] { "ReportObjectId", "Inherited" }, "reportid_inheritied_runid_runs");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "ReportObjectId", "Inherited" }, "reportid_inheritied_runid_runs"), new[] { "RunId", "Runs" });

                    b.HasIndex(new[] { "ReportObjectId" }, "reportid_runid_runs");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "ReportObjectId" }, "reportid_runid_runs"), new[] { "RunId", "Runs" });

                    b.ToTable("ReportObjectRunDataBridge", "dbo");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectSubscription", b =>
                {
                    b.Property<int>("ReportObjectSubscriptionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportObjectSubscriptionsId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InactiveFlags")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLoadDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastRunTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LastStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReportObjectId")
                        .HasColumnType("int");

                    b.Property<string>("SubscriptionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReportObjectSubscriptionsId")
                        .HasName("PK__ReportOb__1AA55D23FE572619");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ReportObjectId", "UserId" }, "reportid + userid");

                    b.ToTable("ReportObjectSubscriptions", "dbo");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectTag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<decimal?>("EpicTagId")
                        .HasColumnType("numeric(18, 0)")
                        .HasColumnName("EpicTagID");

                    b.Property<string>("TagName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("TagId");

                    b.HasIndex(new[] { "TagId" }, "tagid");

                    b.ToTable("ReportObjectTags", "dbo");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectTagMembership", b =>
                {
                    b.Property<int>("TagMembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TagMembershipID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagMembershipId"));

                    b.Property<int?>("Line")
                        .HasColumnType("int");

                    b.Property<int>("ReportObjectId")
                        .HasColumnType("int")
                        .HasColumnName("ReportObjectID");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    b.HasKey("TagMembershipId");

                    b.HasIndex("TagId");

                    b.HasIndex(new[] { "ReportObjectId", "TagId" }, "tagid+reportid");

                    b.ToTable("ReportObjectTagMemberships", "dbo");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectType", b =>
                {
                    b.Property<int>("ReportObjectTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReportObjectTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportObjectTypeId"));

                    b.Property<string>("DefaultEpicMasterFile")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime?>("LastLoadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Visible")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("ReportObjectTypeId");

                    b.HasIndex(new[] { "ReportObjectTypeId" }, "typeid");

                    b.ToTable("ReportObjectType", "dbo");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportServiceRequest", b =>
                {
                    b.Property<int>("ServiceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceRequestId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportObjectId")
                        .HasColumnType("int");

                    b.Property<string>("TicketNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceRequestId")
                        .HasName("PK__ReportMa__97EB8BADB02592C9");

                    b.HasIndex(new[] { "ReportObjectId" }, "reportobjectid");

                    b.ToTable("ReportServiceRequests", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportTagLink", b =>
                {
                    b.Property<int>("ReportTagLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportTagLinkId"));

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<string>("ShowInHeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ReportTagLinkId");

                    b.HasIndex("TagId");

                    b.HasIndex(new[] { "ReportId", "TagId" }, "report_tag");

                    b.ToTable("ReportTagLinks", "dbo");
                });

            modelBuilder.Entity("Atlas_Web.Models.RolePermission", b =>
                {
                    b.Property<int>("RolePermissionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolePermissionsId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RolePermissionsId")
                        .HasName("PK__RolePerm__18B281E0AD8AB9C1");

                    b.ToTable("RolePermissions", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.RolePermissionLink", b =>
                {
                    b.Property<int>("RolePermissionLinksId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolePermissionLinksId"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("RolePermissionsId")
                        .HasColumnType("int");

                    b.HasKey("RolePermissionLinksId")
                        .HasName("PK__UserPerm__40D89C0194D8BDD6");

                    b.HasIndex("RoleId");

                    b.HasIndex("RolePermissionsId");

                    b.ToTable("RolePermissionLinks", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.SharedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ShareDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SharedFromUserId")
                        .HasColumnType("int");

                    b.Property<int?>("SharedToUserId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SharedToUserId");

                    b.HasIndex(new[] { "SharedFromUserId", "SharedToUserId", "ShareDate" }, "from + to + date");

                    b.ToTable("SharedItems", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.StarredCollection", b =>
                {
                    b.Property<int>("StarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StarId"));

                    b.Property<int>("Collectionid")
                        .HasColumnType("int");

                    b.Property<int?>("Folderid")
                        .HasColumnType("int");

                    b.Property<int>("Ownerid")
                        .HasColumnType("int");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.HasKey("StarId")
                        .HasName("PK__StarredC__88222DCEA294BB15");

                    b.HasIndex("Folderid");

                    b.HasIndex("Ownerid");

                    b.HasIndex(new[] { "Collectionid", "Ownerid" }, "collectionid + ownerid");

                    b.HasIndex(new[] { "StarId" }, "starid")
                        .IsUnique();

                    b.ToTable("StarredCollections", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.StarredGroup", b =>
                {
                    b.Property<int>("StarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StarId"));

                    b.Property<int?>("Folderid")
                        .HasColumnType("int");

                    b.Property<int>("Groupid")
                        .HasColumnType("int");

                    b.Property<int>("Ownerid")
                        .HasColumnType("int");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.HasKey("StarId")
                        .HasName("PK__StarredG__88222DCE76B4AC11");

                    b.HasIndex("Ownerid");

                    b.HasIndex(new[] { "Folderid" }, "folderid");

                    b.HasIndex(new[] { "Groupid", "Ownerid" }, "groupid + ownerid");

                    b.HasIndex(new[] { "StarId" }, "starid")
                        .IsUnique();

                    b.ToTable("StarredGroups", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.StarredInitiative", b =>
                {
                    b.Property<int>("StarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StarId"));

                    b.Property<int?>("Folderid")
                        .HasColumnType("int");

                    b.Property<int>("Initiativeid")
                        .HasColumnType("int");

                    b.Property<int>("Ownerid")
                        .HasColumnType("int");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.HasKey("StarId")
                        .HasName("PK__StarredI__88222DCEFCC5A8E5");

                    b.HasIndex("Ownerid");

                    b.HasIndex(new[] { "Folderid" }, "folderid");

                    b.HasIndex(new[] { "Initiativeid", "Ownerid" }, "initiativeid + ownerid");

                    b.HasIndex(new[] { "StarId" }, "starid")
                        .IsUnique();

                    b.ToTable("StarredInitiatives", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.StarredReport", b =>
                {
                    b.Property<int>("StarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StarId"));

                    b.Property<int?>("Folderid")
                        .HasColumnType("int");

                    b.Property<int>("Ownerid")
                        .HasColumnType("int");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("Reportid")
                        .HasColumnType("int");

                    b.HasKey("StarId")
                        .HasName("PK__StarredR__88222DCE157D560E");

                    b.HasIndex("Ownerid");

                    b.HasIndex(new[] { "Folderid" }, "folderid");

                    b.HasIndex(new[] { "Reportid", "Ownerid" }, "reportid + ownerid");

                    b.HasIndex(new[] { "StarId" }, "starid")
                        .IsUnique();

                    b.ToTable("StarredReports", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.StarredSearch", b =>
                {
                    b.Property<int>("StarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StarId"));

                    b.Property<int?>("Folderid")
                        .HasColumnType("int");

                    b.Property<int>("Ownerid")
                        .HasColumnType("int");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Search")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StarId")
                        .HasName("PK__StarredS__88222DCE6D6FEE1D");

                    b.HasIndex("Folderid");

                    b.HasIndex(new[] { "Ownerid" }, "ownerid");

                    b.HasIndex(new[] { "StarId" }, "starid")
                        .IsUnique();

                    b.ToTable("StarredSearches", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.StarredTerm", b =>
                {
                    b.Property<int>("StarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StarId"));

                    b.Property<int?>("Folderid")
                        .HasColumnType("int");

                    b.Property<int>("Ownerid")
                        .HasColumnType("int");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("Termid")
                        .HasColumnType("int");

                    b.HasKey("StarId")
                        .HasName("PK__StarredT__88222DCE11EE382D");

                    b.HasIndex("Ownerid");

                    b.HasIndex(new[] { "Folderid" }, "folderid");

                    b.HasIndex(new[] { "StarId" }, "starid")
                        .IsUnique();

                    b.HasIndex(new[] { "Termid", "Ownerid" }, "termid + ownerid");

                    b.ToTable("StarredTerms", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.StarredUser", b =>
                {
                    b.Property<int>("StarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StarId"));

                    b.Property<int?>("Folderid")
                        .HasColumnType("int");

                    b.Property<int>("Ownerid")
                        .HasColumnType("int");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("Userid")
                        .HasColumnType("int");

                    b.HasKey("StarId")
                        .HasName("PK__StarredU__88222DCE446292A3");

                    b.HasIndex("Ownerid");

                    b.HasIndex(new[] { "Folderid" }, "folderid");

                    b.HasIndex(new[] { "Userid", "Ownerid" }, "ownerid + userid");

                    b.HasIndex(new[] { "StarId" }, "starid")
                        .IsUnique();

                    b.ToTable("StarredUsers", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.StrategicImportance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("StrategicImportance", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("ShowInHeader")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.HasIndex(new[] { "TagId" }, "tagid");

                    b.HasIndex(new[] { "Name" }, "tagname");

                    b.ToTable("Tags", "dbo");
                });

            modelBuilder.Entity("Atlas_Web.Models.Term", b =>
                {
                    b.Property<int>("TermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TermId"));

                    b.Property<DateTime?>("ApprovalDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("ApprovedYn")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ApprovedYN")
                        .IsFixedLength();

                    b.Property<string>("ExternalStandardUrl")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("HasExternalStandardYn")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HasExternalStandardYN")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Summary")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("TechnicalDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ValidFromDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidToDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("TermId");

                    b.HasIndex(new[] { "ApprovedYn" }, "approved");

                    b.HasIndex(new[] { "ApprovedByUserId" }, "approvedby");

                    b.HasIndex(new[] { "TermId" }, "termid")
                        .IsUnique();

                    b.HasIndex(new[] { "UpdatedByUserId" }, "updatedby");

                    b.HasIndex(new[] { "ValidFromDateTime" }, "validfrom");

                    b.ToTable("Term", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Base")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("EpicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstnameCalc")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Firstname_calc");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullnameCalc")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Fullname_calc");

                    b.Property<DateTime?>("LastLoadDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "UserId" }, "userid")
                        .IsUnique();

                    b.ToTable("User", "dbo");
                });

            modelBuilder.Entity("Atlas_Web.Models.UserFavoriteFolder", b =>
                {
                    b.Property<int>("UserFavoriteFolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserFavoriteFolderId"));

                    b.Property<string>("FolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FolderRank")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserFavoriteFolderId");

                    b.HasIndex(new[] { "UserId" }, "userid");

                    b.ToTable("UserFavoriteFolders", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.UserGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EpicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLoadDate")
                        .HasColumnType("datetime");

                    b.HasKey("GroupId");

                    b.HasIndex(new[] { "GroupId" }, "groupid")
                        .IsUnique();

                    b.ToTable("UserGroups", "dbo");
                });

            modelBuilder.Entity("Atlas_Web.Models.UserGroupsMembership", b =>
                {
                    b.Property<int>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembershipId"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLoadDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MembershipId");

                    b.HasIndex(new[] { "GroupId" }, "groupdid + userid");

                    b.HasIndex(new[] { "UserId", "GroupId" }, "userid+groupid");

                    b.ToTable("UserGroupsMembership", "dbo");
                });

            modelBuilder.Entity("Atlas_Web.Models.UserPreference", b =>
                {
                    b.Property<int>("UserPreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPreferenceId"));

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ItemValue")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserPreferenceId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ItemValue", "ItemId", "UserId" }, "itemvalue + itemid + userid");

                    b.ToTable("UserPreferences", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.UserRole", b =>
                {
                    b.Property<int>("UserRolesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRolesId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserRolesId")
                        .HasName("PK__UserRole__41D8EF2F71AEFA0B");

                    b.HasIndex(new[] { "UserRolesId" }, "roleid");

                    b.ToTable("UserRoles", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.UserRoleLink", b =>
                {
                    b.Property<int>("UserRoleLinksId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleLinksId"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserRolesId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleLinksId")
                        .HasName("PK__UserRole__41D8EF2F662663D0");

                    b.HasIndex("UserRolesId");

                    b.HasIndex(new[] { "UserId", "UserRolesId" }, "userid+roleid");

                    b.ToTable("UserRoleLinks", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.UserSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "user");

                    b.HasIndex(new[] { "UserId", "Name" }, "user_setting");

                    b.ToTable("UserSettings", "app");
                });

            modelBuilder.Entity("Atlas_Web.Models.Analytic", b =>
                {
                    b.HasOne("Atlas_Web.Models.User", "User")
                        .WithMany("Analytics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Analytics_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Atlas_Web.Models.AnalyticsError", b =>
                {
                    b.HasOne("Atlas_Web.Models.User", "User")
                        .WithMany("AnalyticsErrors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Analytics_Error_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Atlas_Web.Models.AnalyticsTrace", b =>
                {
                    b.HasOne("Atlas_Web.Models.User", "User")
                        .WithMany("AnalyticsTraces")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Analytics_Trace_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Atlas_Web.Models.Collection", b =>
                {
                    b.HasOne("Atlas_Web.Models.User", "AnalyticsOwner")
                        .WithMany("DpDataProjectAnalyticsOwners")
                        .HasForeignKey("AnalyticsOwnerId")
                        .HasConstraintName("FK_DP_DataProject_WebAppUsers1");

                    b.HasOne("Atlas_Web.Models.User", "DataManager")
                        .WithMany("DpDataProjectDataManagers")
                        .HasForeignKey("DataManagerId")
                        .HasConstraintName("FK_DP_DataProject_User2");

                    b.HasOne("Atlas_Web.Models.User", "ExecutiveOwner")
                        .WithMany("DpDataProjectExecutiveOwners")
                        .HasForeignKey("ExecutiveOwnerId")
                        .HasConstraintName("FK_DP_DataProject_User");

                    b.HasOne("Atlas_Web.Models.FinancialImpact", "FinancialImpactNavigation")
                        .WithMany("Collections")
                        .HasForeignKey("FinancialImpact")
                        .HasConstraintName("FK_DP_DataProject_FinancialImpact");

                    b.HasOne("Atlas_Web.Models.Initiative", "Initiative")
                        .WithMany("Collections")
                        .HasForeignKey("InitiativeId")
                        .HasConstraintName("FK_DP_DataProject_DP_DataInitiative");

                    b.HasOne("Atlas_Web.Models.User", "LastUpdateUserNavigation")
                        .WithMany("DpDataProjectLastUpdateUserNavigations")
                        .HasForeignKey("LastUpdateUser")
                        .HasConstraintName("FK_DP_DataProject_WebAppUsers");

                    b.HasOne("Atlas_Web.Models.User", "OperationOwner")
                        .WithMany("DpDataProjectOperationOwners")
                        .HasForeignKey("OperationOwnerId")
                        .HasConstraintName("FK_DP_DataProject_User1");

                    b.HasOne("Atlas_Web.Models.StrategicImportance", "StrategicImportanceNavigation")
                        .WithMany("Collections")
                        .HasForeignKey("StrategicImportance")
                        .HasConstraintName("FK_DP_DataProject_StrategicImportance");

                    b.Navigation("AnalyticsOwner");

                    b.Navigation("DataManager");

                    b.Navigation("ExecutiveOwner");

                    b.Navigation("FinancialImpactNavigation");

                    b.Navigation("Initiative");

                    b.Navigation("LastUpdateUserNavigation");

                    b.Navigation("OperationOwner");

                    b.Navigation("StrategicImportanceNavigation");
                });

            modelBuilder.Entity("Atlas_Web.Models.CollectionReport", b =>
                {
                    b.HasOne("Atlas_Web.Models.Collection", "DataProject")
                        .WithMany("CollectionReports")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DP_ReportAnnotation_DP_DataProject");

                    b.HasOne("Atlas_Web.Models.ReportObject", "Report")
                        .WithMany("CollectionReports")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DP_ReportAnnotation_ReportObject");

                    b.Navigation("DataProject");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Atlas_Web.Models.CollectionTerm", b =>
                {
                    b.HasOne("Atlas_Web.Models.Collection", "DataProject")
                        .WithMany("CollectionTerms")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DP_TermAnnotation_DP_DataProject");

                    b.HasOne("Atlas_Web.Models.Term", "Term")
                        .WithMany("CollectionTerms")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DP_TermAnnotation_Term");

                    b.Navigation("DataProject");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Atlas_Web.Models.GroupRoleLink", b =>
                {
                    b.HasOne("Atlas_Web.Models.UserGroup", "Group")
                        .WithMany("GroupRoleLinks")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GroupRoleLinks_Group");

                    b.HasOne("Atlas_Web.Models.UserRole", "UserRoles")
                        .WithMany("GroupRoleLinks")
                        .HasForeignKey("UserRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GroupRoleLinks_UserRoles");

                    b.Navigation("Group");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Atlas_Web.Models.Initiative", b =>
                {
                    b.HasOne("Atlas_Web.Models.User", "ExecutiveOwner")
                        .WithMany("DpDataInitiativeExecutiveOwners")
                        .HasForeignKey("ExecutiveOwnerId")
                        .HasConstraintName("FK_DP_DataInitiative_User");

                    b.HasOne("Atlas_Web.Models.FinancialImpact", "FinancialImpactNavigation")
                        .WithMany("Initiatives")
                        .HasForeignKey("FinancialImpact")
                        .HasConstraintName("FK_DP_DataInitiative_FinancialImpact");

                    b.HasOne("Atlas_Web.Models.User", "LastUpdateUserNavigation")
                        .WithMany("DpDataInitiativeLastUpdateUserNavigations")
                        .HasForeignKey("LastUpdateUser")
                        .HasConstraintName("FK_DP_DataInitiative_WebAppUsers");

                    b.HasOne("Atlas_Web.Models.User", "OperationOwner")
                        .WithMany("DpDataInitiativeOperationOwners")
                        .HasForeignKey("OperationOwnerId")
                        .HasConstraintName("FK_DP_DataInitiative_User1");

                    b.HasOne("Atlas_Web.Models.StrategicImportance", "StrategicImportanceNavigation")
                        .WithMany("Initiatives")
                        .HasForeignKey("StrategicImportance")
                        .HasConstraintName("FK_DP_DataInitiative_StrategicImportance");

                    b.Navigation("ExecutiveOwner");

                    b.Navigation("FinancialImpactNavigation");

                    b.Navigation("LastUpdateUserNavigation");

                    b.Navigation("OperationOwner");

                    b.Navigation("StrategicImportanceNavigation");
                });

            modelBuilder.Entity("Atlas_Web.Models.MailConversation", b =>
                {
                    b.HasOne("Atlas_Web.Models.MailMessage", "Message")
                        .WithMany("MailConversations")
                        .HasForeignKey("MessageId")
                        .IsRequired()
                        .HasConstraintName("FK_Mail_Conversations_Mail_Messages");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Atlas_Web.Models.MailDraft", b =>
                {
                    b.HasOne("Atlas_Web.Models.User", "FromUser")
                        .WithMany("MailDrafts")
                        .HasForeignKey("FromUserId")
                        .HasConstraintName("FK_Mail_Drafts_User");

                    b.Navigation("FromUser");
                });

            modelBuilder.Entity("Atlas_Web.Models.MailFolder", b =>
                {
                    b.HasOne("Atlas_Web.Models.User", "User")
                        .WithMany("MailFolders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Mail_Folders_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Atlas_Web.Models.MailFolderMessage", b =>
                {
                    b.HasOne("Atlas_Web.Models.MailFolder", "Folder")
                        .WithMany("MailFolderMessages")
                        .HasForeignKey("FolderId")
                        .HasConstraintName("FK_Mail_FolderMessages_Mail_Folders");

                    b.HasOne("Atlas_Web.Models.MailMessage", "Message")
                        .WithMany("MailFolderMessages")
                        .HasForeignKey("MessageId")
                        .HasConstraintName("FK_Mail_FolderMessages_Mail_Messages");

                    b.Navigation("Folder");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Atlas_Web.Models.MailMessage", b =>
                {
                    b.HasOne("Atlas_Web.Models.User", "FromUser")
                        .WithMany("MailMessages")
                        .HasForeignKey("FromUserId")
                        .HasConstraintName("FK_Mail_Messages_User");

                    b.HasOne("Atlas_Web.Models.MailMessageType", "MessageType")
                        .WithMany("MailMessages")
                        .HasForeignKey("MessageTypeId")
                        .HasConstraintName("FK_Mail_Messages_Mail_MessageType");

                    b.Navigation("FromUser");

                    b.Navigation("MessageType");
                });

            modelBuilder.Entity("Atlas_Web.Models.MailRecipient", b =>
                {
                    b.HasOne("Atlas_Web.Models.MailMessage", "Message")
                        .WithMany("MailRecipients")
                        .HasForeignKey("MessageId")
                        .HasConstraintName("FK_Mail_Recipients_Mail_Messages");

                    b.HasOne("Atlas_Web.Models.UserGroup", "ToGroup")
                        .WithMany("MailRecipients")
                        .HasForeignKey("ToGroupId")
                        .HasConstraintName("FK_Mail_Recipients_UserLDAPGroups");

                    b.HasOne("Atlas_Web.Models.User", "ToUser")
                        .WithMany("MailRecipients")
                        .HasForeignKey("ToUserId")
                        .HasConstraintName("FK_Mail_Recipients_User");

                    b.Navigation("Message");

                    b.Navigation("ToGroup");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("Atlas_Web.Models.MailRecipientsDeleted", b =>
                {
                    b.HasOne("Atlas_Web.Models.User", "ToUser")
                        .WithMany("MailRecipientsDeleteds")
                        .HasForeignKey("ToUserId")
                        .HasConstraintName("FK_Mail_Recipients_User1");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("Atlas_Web.Models.MaintenanceLog", b =>
                {
                    b.HasOne("Atlas_Web.Models.User", "Maintainer")
                        .WithMany("MaintenanceLogs")
                        .HasForeignKey("MaintainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Maintenan__Maint__65F62111");

                    b.HasOne("Atlas_Web.Models.MaintenanceLogStatus", "MaintenanceLogStatus")
                        .WithMany("MaintenanceLogs")
                        .HasForeignKey("MaintenanceLogStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Maintenan__Maint__251C81ED");

                    b.HasOne("Atlas_Web.Models.ReportObjectDoc", "ReportObjectDoc")
                        .WithMany("MaintenanceLogs")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ReportObj__Repor__72E3DB65");

                    b.Navigation("Maintainer");

                    b.Navigation("MaintenanceLogStatus");

                    b.Navigation("ReportObjectDoc");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportGroupsMembership", b =>
                {
                    b.HasOne("Atlas_Web.Models.UserGroup", "Group")
                        .WithMany("ReportGroupsMemberships")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_ReportGroupsMemberships_UserGroups");

                    b.HasOne("Atlas_Web.Models.ReportObject", "Report")
                        .WithMany("ReportGroupsMemberships")
                        .HasForeignKey("ReportId")
                        .IsRequired()
                        .HasConstraintName("FK_ReportGroupsMemberships_ReportObject");

                    b.Navigation("Group");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObject", b =>
                {
                    b.HasOne("Atlas_Web.Models.User", "AuthorUser")
                        .WithMany("ReportObjectAuthorUsers")
                        .HasForeignKey("AuthorUserId")
                        .HasConstraintName("FK__ReportObj__Autho__35682A19");

                    b.HasOne("Atlas_Web.Models.User", "LastModifiedByUser")
                        .WithMany("ReportObjectLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK__ReportObj__LastM__365C4E52");

                    b.HasOne("Atlas_Web.Models.ReportObjectType", "ReportObjectType")
                        .WithMany("ReportObjects")
                        .HasForeignKey("ReportObjectTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__ReportObj__Repor__3750728B");

                    b.Navigation("AuthorUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("ReportObjectType");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectAttachment", b =>
                {
                    b.HasOne("Atlas_Web.Models.ReportObject", "ReportObject")
                        .WithMany("ReportObjectAttachments")
                        .HasForeignKey("ReportObjectId")
                        .IsRequired()
                        .HasConstraintName("FK_ReportObjectAttachments_ReportObject");

                    b.Navigation("ReportObject");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectDoc", b =>
                {
                    b.HasOne("Atlas_Web.Models.EstimatedRunFrequency", "EstimatedRunFrequency")
                        .WithMany("ReportObjectDocs")
                        .HasForeignKey("EstimatedRunFrequencyId")
                        .HasConstraintName("FK__ReportObj__Estim__477199F1");

                    b.HasOne("Atlas_Web.Models.Fragility", "Fragility")
                        .WithMany("ReportObjectDocs")
                        .HasForeignKey("FragilityId")
                        .HasConstraintName("FK__ReportObj__Fragi__4865BE2A");

                    b.HasOne("Atlas_Web.Models.MaintenanceSchedule", "MaintenanceSchedule")
                        .WithMany("ReportObjectDocs")
                        .HasForeignKey("MaintenanceScheduleId")
                        .HasConstraintName("FK__ReportObj__Maint__4959E263");

                    b.HasOne("Atlas_Web.Models.User", "OperationalOwnerUser")
                        .WithMany("ReportObjectDocOperationalOwnerUsers")
                        .HasForeignKey("OperationalOwnerUserId")
                        .HasConstraintName("FK__ReportObj__Opera__4B422AD5");

                    b.HasOne("Atlas_Web.Models.OrganizationalValue", "OrganizationalValue")
                        .WithMany("ReportObjectDocs")
                        .HasForeignKey("OrganizationalValueId")
                        .HasConstraintName("FK__ReportObj__Organ__4C364F0E");

                    b.HasOne("Atlas_Web.Models.ReportObject", "ReportObject")
                        .WithOne("ReportObjectDoc")
                        .HasForeignKey("Atlas_Web.Models.ReportObjectDoc", "ReportObjectId")
                        .IsRequired()
                        .HasConstraintName("FK__ReportObj__Repor__3938BAFD");

                    b.HasOne("Atlas_Web.Models.User", "RequesterNavigation")
                        .WithMany("ReportObjectDocRequesterNavigations")
                        .HasForeignKey("Requester")
                        .HasConstraintName("FK__ReportObj__Reque__4E1E9780");

                    b.HasOne("Atlas_Web.Models.User", "UpdatedByNavigation")
                        .WithMany("ReportObjectDocUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_ReportObject_doc_User");

                    b.Navigation("EstimatedRunFrequency");

                    b.Navigation("Fragility");

                    b.Navigation("MaintenanceSchedule");

                    b.Navigation("OperationalOwnerUser");

                    b.Navigation("OrganizationalValue");

                    b.Navigation("ReportObject");

                    b.Navigation("RequesterNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectDocFragilityTag", b =>
                {
                    b.HasOne("Atlas_Web.Models.FragilityTag", "FragilityTag")
                        .WithMany("ReportObjectDocFragilityTags")
                        .HasForeignKey("FragilityTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ReportObj__Fragi__71EFB72C");

                    b.HasOne("Atlas_Web.Models.ReportObjectDoc", "ReportObject")
                        .WithMany("ReportObjectDocFragilityTags")
                        .HasForeignKey("ReportObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ReportObj__Repor__72E3DB67");

                    b.Navigation("FragilityTag");

                    b.Navigation("ReportObject");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectDocTerm", b =>
                {
                    b.HasOne("Atlas_Web.Models.ReportObjectDoc", "ReportObject")
                        .WithMany("ReportObjectDocTerms")
                        .HasForeignKey("ReportObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ReportObj__Repor__6A4E9564");

                    b.HasOne("Atlas_Web.Models.Term", "Term")
                        .WithMany("ReportObjectDocTerms")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ReportObj__TermI__6B42B99D");

                    b.Navigation("ReportObject");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectHierarchy", b =>
                {
                    b.HasOne("Atlas_Web.Models.ReportObject", "ChildReportObject")
                        .WithMany("ReportObjectHierarchyChildReportObjects")
                        .HasForeignKey("ChildReportObjectId")
                        .IsRequired()
                        .HasConstraintName("FK__ReportObj__Child__3C1527A8");

                    b.HasOne("Atlas_Web.Models.ReportObject", "ParentReportObject")
                        .WithMany("ReportObjectHierarchyParentReportObjects")
                        .HasForeignKey("ParentReportObjectId")
                        .IsRequired()
                        .HasConstraintName("FK__ReportObj__Paren__3D094BE1");

                    b.Navigation("ChildReportObject");

                    b.Navigation("ParentReportObject");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectImagesDoc", b =>
                {
                    b.HasOne("Atlas_Web.Models.ReportObject", "ReportObject")
                        .WithMany("ReportObjectImagesDocs")
                        .HasForeignKey("ReportObjectId")
                        .IsRequired()
                        .HasConstraintName("FK__ReportObj__Repor__3A2CDF36");

                    b.Navigation("ReportObject");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectParameter", b =>
                {
                    b.HasOne("Atlas_Web.Models.ReportObject", "ReportObject")
                        .WithMany("ReportObjectParameters")
                        .HasForeignKey("ReportObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReportObjectParameters1_ReportObject");

                    b.Navigation("ReportObject");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectQuery", b =>
                {
                    b.HasOne("Atlas_Web.Models.ReportObject", "ReportObject")
                        .WithMany("ReportObjectQueries")
                        .HasForeignKey("ReportObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReportObjectQuery_ReportObject");

                    b.Navigation("ReportObject");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectRunData", b =>
                {
                    b.HasOne("Atlas_Web.Models.User", "RunUser")
                        .WithMany("ReportObjectRunDatas")
                        .HasForeignKey("RunUserId")
                        .HasConstraintName("FK__ReportObj__RunUs__7C16A936");

                    b.Navigation("RunUser");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectRunDataBridge", b =>
                {
                    b.HasOne("Atlas_Web.Models.ReportObject", "ReportObject")
                        .WithMany("ReportObjectRunDataBridges")
                        .HasForeignKey("ReportObjectId")
                        .IsRequired()
                        .HasConstraintName("FK__ReportObj__Repor__7B2284FD");

                    b.HasOne("Atlas_Web.Models.ReportObjectRunData", "RunData")
                        .WithMany("ReportObjectRunDataBridges")
                        .HasForeignKey("RunId")
                        .HasPrincipalKey("RunDataId")
                        .HasConstraintName("FK__ReportObj__Run__6A4E9564");

                    b.Navigation("ReportObject");

                    b.Navigation("RunData");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectSubscription", b =>
                {
                    b.HasOne("Atlas_Web.Models.ReportObject", "ReportObject")
                        .WithMany("ReportObjectSubscriptions")
                        .HasForeignKey("ReportObjectId")
                        .HasConstraintName("FK_ReportObjectSubscriptions_ReportObject");

                    b.HasOne("Atlas_Web.Models.User", "User")
                        .WithMany("ReportObjectSubscriptions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ReportObjectSubscriptions_User");

                    b.Navigation("ReportObject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectTagMembership", b =>
                {
                    b.HasOne("Atlas_Web.Models.ReportObject", "ReportObject")
                        .WithMany("ReportObjectTagMemberships")
                        .HasForeignKey("ReportObjectId")
                        .IsRequired()
                        .HasConstraintName("FK_ReportObjectTagMemberships_ReportObject");

                    b.HasOne("Atlas_Web.Models.ReportObjectTag", "Tag")
                        .WithMany("ReportObjectTagMemberships")
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK_ReportObjectTagMemberships_ReportObjectTags");

                    b.Navigation("ReportObject");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportServiceRequest", b =>
                {
                    b.HasOne("Atlas_Web.Models.ReportObjectDoc", "ReportObject")
                        .WithMany("ReportServiceRequests")
                        .HasForeignKey("ReportObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReportServiceRequests_ReportObject");

                    b.Navigation("ReportObject");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportTagLink", b =>
                {
                    b.HasOne("Atlas_Web.Models.ReportObject", "Report")
                        .WithMany("ReportTagLinks")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Atlas_Web.Models.Tag", "Tag")
                        .WithMany("ReportTagLinks")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Atlas_Web.Models.RolePermissionLink", b =>
                {
                    b.HasOne("Atlas_Web.Models.UserRole", "Role")
                        .WithMany("RolePermissionLinks")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolePermissionLinks_UserRoles");

                    b.HasOne("Atlas_Web.Models.RolePermission", "RolePermissions")
                        .WithMany("RolePermissionLinks")
                        .HasForeignKey("RolePermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolePermissionLinks_RolePermissions");

                    b.Navigation("Role");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Atlas_Web.Models.SharedItem", b =>
                {
                    b.HasOne("Atlas_Web.Models.User", "SharedFromUser")
                        .WithMany("SharedItemSharedFromUsers")
                        .HasForeignKey("SharedFromUserId")
                        .HasConstraintName("FK_SharedItems_User");

                    b.HasOne("Atlas_Web.Models.User", "SharedToUser")
                        .WithMany("SharedItemSharedToUsers")
                        .HasForeignKey("SharedToUserId")
                        .HasConstraintName("FK_SharedItems_User1");

                    b.Navigation("SharedFromUser");

                    b.Navigation("SharedToUser");
                });

            modelBuilder.Entity("Atlas_Web.Models.StarredCollection", b =>
                {
                    b.HasOne("Atlas_Web.Models.Collection", "Collection")
                        .WithMany("StarredCollections")
                        .HasForeignKey("Collectionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StarredCollections_DP_DataProject");

                    b.HasOne("Atlas_Web.Models.UserFavoriteFolder", "Folder")
                        .WithMany("StarredCollections")
                        .HasForeignKey("Folderid")
                        .HasConstraintName("FK_StarredCollections_UserFavoriteFolders");

                    b.HasOne("Atlas_Web.Models.User", "Owner")
                        .WithMany("StarredCollections")
                        .HasForeignKey("Ownerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StarredCollections_User");

                    b.Navigation("Collection");

                    b.Navigation("Folder");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Atlas_Web.Models.StarredGroup", b =>
                {
                    b.HasOne("Atlas_Web.Models.UserFavoriteFolder", "Folder")
                        .WithMany("StarredGroups")
                        .HasForeignKey("Folderid")
                        .HasConstraintName("FK_StarredGroups_UserFavoriteFolders");

                    b.HasOne("Atlas_Web.Models.UserGroup", "Group")
                        .WithMany("StarredGroups")
                        .HasForeignKey("Groupid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StarredGroups_UserGroups");

                    b.HasOne("Atlas_Web.Models.User", "Owner")
                        .WithMany("StarredGroups")
                        .HasForeignKey("Ownerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StarredGroups_User");

                    b.Navigation("Folder");

                    b.Navigation("Group");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Atlas_Web.Models.StarredInitiative", b =>
                {
                    b.HasOne("Atlas_Web.Models.UserFavoriteFolder", "Folder")
                        .WithMany("StarredInitiatives")
                        .HasForeignKey("Folderid")
                        .HasConstraintName("FK_StarredInitiatives_UserFavoriteFolders");

                    b.HasOne("Atlas_Web.Models.Initiative", "Initiative")
                        .WithMany("StarredInitiatives")
                        .HasForeignKey("Initiativeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StarredInitiatives_DP_DataInitiative");

                    b.HasOne("Atlas_Web.Models.User", "Owner")
                        .WithMany("StarredInitiatives")
                        .HasForeignKey("Ownerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StarredInitiatives_User");

                    b.Navigation("Folder");

                    b.Navigation("Initiative");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Atlas_Web.Models.StarredReport", b =>
                {
                    b.HasOne("Atlas_Web.Models.UserFavoriteFolder", "Folder")
                        .WithMany("StarredReports")
                        .HasForeignKey("Folderid")
                        .HasConstraintName("FK_StarredReports_UserFavoriteFolders");

                    b.HasOne("Atlas_Web.Models.User", "Owner")
                        .WithMany("StarredReports")
                        .HasForeignKey("Ownerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StarredReports_User");

                    b.HasOne("Atlas_Web.Models.ReportObject", "Report")
                        .WithMany("StarredReports")
                        .HasForeignKey("Reportid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StarredReports_ReportObject");

                    b.Navigation("Folder");

                    b.Navigation("Owner");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Atlas_Web.Models.StarredSearch", b =>
                {
                    b.HasOne("Atlas_Web.Models.UserFavoriteFolder", "Folder")
                        .WithMany("StarredSearches")
                        .HasForeignKey("Folderid")
                        .HasConstraintName("FK_StarredSearches_UserFavoriteFolders");

                    b.HasOne("Atlas_Web.Models.User", "Owner")
                        .WithMany("StarredSearches")
                        .HasForeignKey("Ownerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StarredSearches_User");

                    b.Navigation("Folder");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Atlas_Web.Models.StarredTerm", b =>
                {
                    b.HasOne("Atlas_Web.Models.UserFavoriteFolder", "Folder")
                        .WithMany("StarredTerms")
                        .HasForeignKey("Folderid")
                        .HasConstraintName("FK_StarredTerms_UserFavoriteFolders");

                    b.HasOne("Atlas_Web.Models.User", "Owner")
                        .WithMany("StarredTerms")
                        .HasForeignKey("Ownerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StarredTerms_User");

                    b.HasOne("Atlas_Web.Models.Term", "Term")
                        .WithMany("StarredTerms")
                        .HasForeignKey("Termid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StarredTerms_Term");

                    b.Navigation("Folder");

                    b.Navigation("Owner");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Atlas_Web.Models.StarredUser", b =>
                {
                    b.HasOne("Atlas_Web.Models.UserFavoriteFolder", "Folder")
                        .WithMany("StarredUsers")
                        .HasForeignKey("Folderid")
                        .HasConstraintName("FK_StarredUsers_UserFavoriteFolders");

                    b.HasOne("Atlas_Web.Models.User", "Owner")
                        .WithMany("StarredUserOwners")
                        .HasForeignKey("Ownerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StarredUsers_User_owner");

                    b.HasOne("Atlas_Web.Models.User", "User")
                        .WithMany("StarredUserUsers")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_StarredUsers_User");

                    b.Navigation("Folder");

                    b.Navigation("Owner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Atlas_Web.Models.Term", b =>
                {
                    b.HasOne("Atlas_Web.Models.User", "ApprovedByUser")
                        .WithMany("TermApprovedByUsers")
                        .HasForeignKey("ApprovedByUserId")
                        .HasConstraintName("FK_Term_WebAppUsers1");

                    b.HasOne("Atlas_Web.Models.User", "UpdatedByUser")
                        .WithMany("TermUpdatedByUsers")
                        .HasForeignKey("UpdatedByUserId")
                        .HasConstraintName("FK_Term_WebAppUsers");

                    b.Navigation("ApprovedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Atlas_Web.Models.UserGroupsMembership", b =>
                {
                    b.HasOne("Atlas_Web.Models.UserGroup", "Group")
                        .WithMany("UserGroupsMemberships")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserGroupsMembership_UserGroups");

                    b.HasOne("Atlas_Web.Models.User", "User")
                        .WithMany("UserGroupsMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserGroupsMembership_User");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Atlas_Web.Models.UserPreference", b =>
                {
                    b.HasOne("Atlas_Web.Models.User", "User")
                        .WithMany("UserPreferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserPreferences_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Atlas_Web.Models.UserRoleLink", b =>
                {
                    b.HasOne("Atlas_Web.Models.User", "User")
                        .WithMany("UserRoleLinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRoleLinks_User");

                    b.HasOne("Atlas_Web.Models.UserRole", "UserRoles")
                        .WithMany("UserRoleLinks")
                        .HasForeignKey("UserRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRoleLinks_UserRoles");

                    b.Navigation("User");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Atlas_Web.Models.UserSetting", b =>
                {
                    b.HasOne("Atlas_Web.Models.User", "User")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserSettings_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Atlas_Web.Models.Collection", b =>
                {
                    b.Navigation("CollectionReports");

                    b.Navigation("CollectionTerms");

                    b.Navigation("StarredCollections");
                });

            modelBuilder.Entity("Atlas_Web.Models.EstimatedRunFrequency", b =>
                {
                    b.Navigation("ReportObjectDocs");
                });

            modelBuilder.Entity("Atlas_Web.Models.FinancialImpact", b =>
                {
                    b.Navigation("Collections");

                    b.Navigation("Initiatives");
                });

            modelBuilder.Entity("Atlas_Web.Models.Fragility", b =>
                {
                    b.Navigation("ReportObjectDocs");
                });

            modelBuilder.Entity("Atlas_Web.Models.FragilityTag", b =>
                {
                    b.Navigation("ReportObjectDocFragilityTags");
                });

            modelBuilder.Entity("Atlas_Web.Models.Initiative", b =>
                {
                    b.Navigation("Collections");

                    b.Navigation("StarredInitiatives");
                });

            modelBuilder.Entity("Atlas_Web.Models.MailFolder", b =>
                {
                    b.Navigation("MailFolderMessages");
                });

            modelBuilder.Entity("Atlas_Web.Models.MailMessage", b =>
                {
                    b.Navigation("MailConversations");

                    b.Navigation("MailFolderMessages");

                    b.Navigation("MailRecipients");
                });

            modelBuilder.Entity("Atlas_Web.Models.MailMessageType", b =>
                {
                    b.Navigation("MailMessages");
                });

            modelBuilder.Entity("Atlas_Web.Models.MaintenanceLogStatus", b =>
                {
                    b.Navigation("MaintenanceLogs");
                });

            modelBuilder.Entity("Atlas_Web.Models.MaintenanceSchedule", b =>
                {
                    b.Navigation("ReportObjectDocs");
                });

            modelBuilder.Entity("Atlas_Web.Models.OrganizationalValue", b =>
                {
                    b.Navigation("ReportObjectDocs");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObject", b =>
                {
                    b.Navigation("CollectionReports");

                    b.Navigation("ReportGroupsMemberships");

                    b.Navigation("ReportObjectAttachments");

                    b.Navigation("ReportObjectDoc");

                    b.Navigation("ReportObjectHierarchyChildReportObjects");

                    b.Navigation("ReportObjectHierarchyParentReportObjects");

                    b.Navigation("ReportObjectImagesDocs");

                    b.Navigation("ReportObjectParameters");

                    b.Navigation("ReportObjectQueries");

                    b.Navigation("ReportObjectRunDataBridges");

                    b.Navigation("ReportObjectSubscriptions");

                    b.Navigation("ReportObjectTagMemberships");

                    b.Navigation("ReportTagLinks");

                    b.Navigation("StarredReports");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectDoc", b =>
                {
                    b.Navigation("MaintenanceLogs");

                    b.Navigation("ReportObjectDocFragilityTags");

                    b.Navigation("ReportObjectDocTerms");

                    b.Navigation("ReportServiceRequests");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectRunData", b =>
                {
                    b.Navigation("ReportObjectRunDataBridges");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectTag", b =>
                {
                    b.Navigation("ReportObjectTagMemberships");
                });

            modelBuilder.Entity("Atlas_Web.Models.ReportObjectType", b =>
                {
                    b.Navigation("ReportObjects");
                });

            modelBuilder.Entity("Atlas_Web.Models.RolePermission", b =>
                {
                    b.Navigation("RolePermissionLinks");
                });

            modelBuilder.Entity("Atlas_Web.Models.StrategicImportance", b =>
                {
                    b.Navigation("Collections");

                    b.Navigation("Initiatives");
                });

            modelBuilder.Entity("Atlas_Web.Models.Tag", b =>
                {
                    b.Navigation("ReportTagLinks");
                });

            modelBuilder.Entity("Atlas_Web.Models.Term", b =>
                {
                    b.Navigation("CollectionTerms");

                    b.Navigation("ReportObjectDocTerms");

                    b.Navigation("StarredTerms");
                });

            modelBuilder.Entity("Atlas_Web.Models.User", b =>
                {
                    b.Navigation("Analytics");

                    b.Navigation("AnalyticsErrors");

                    b.Navigation("AnalyticsTraces");

                    b.Navigation("DpDataInitiativeExecutiveOwners");

                    b.Navigation("DpDataInitiativeLastUpdateUserNavigations");

                    b.Navigation("DpDataInitiativeOperationOwners");

                    b.Navigation("DpDataProjectAnalyticsOwners");

                    b.Navigation("DpDataProjectDataManagers");

                    b.Navigation("DpDataProjectExecutiveOwners");

                    b.Navigation("DpDataProjectLastUpdateUserNavigations");

                    b.Navigation("DpDataProjectOperationOwners");

                    b.Navigation("MailDrafts");

                    b.Navigation("MailFolders");

                    b.Navigation("MailMessages");

                    b.Navigation("MailRecipients");

                    b.Navigation("MailRecipientsDeleteds");

                    b.Navigation("MaintenanceLogs");

                    b.Navigation("ReportObjectAuthorUsers");

                    b.Navigation("ReportObjectDocOperationalOwnerUsers");

                    b.Navigation("ReportObjectDocRequesterNavigations");

                    b.Navigation("ReportObjectDocUpdatedByNavigations");

                    b.Navigation("ReportObjectLastModifiedByUsers");

                    b.Navigation("ReportObjectRunDatas");

                    b.Navigation("ReportObjectSubscriptions");

                    b.Navigation("SharedItemSharedFromUsers");

                    b.Navigation("SharedItemSharedToUsers");

                    b.Navigation("StarredCollections");

                    b.Navigation("StarredGroups");

                    b.Navigation("StarredInitiatives");

                    b.Navigation("StarredReports");

                    b.Navigation("StarredSearches");

                    b.Navigation("StarredTerms");

                    b.Navigation("StarredUserOwners");

                    b.Navigation("StarredUserUsers");

                    b.Navigation("TermApprovedByUsers");

                    b.Navigation("TermUpdatedByUsers");

                    b.Navigation("UserGroupsMemberships");

                    b.Navigation("UserPreferences");

                    b.Navigation("UserRoleLinks");

                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("Atlas_Web.Models.UserFavoriteFolder", b =>
                {
                    b.Navigation("StarredCollections");

                    b.Navigation("StarredGroups");

                    b.Navigation("StarredInitiatives");

                    b.Navigation("StarredReports");

                    b.Navigation("StarredSearches");

                    b.Navigation("StarredTerms");

                    b.Navigation("StarredUsers");
                });

            modelBuilder.Entity("Atlas_Web.Models.UserGroup", b =>
                {
                    b.Navigation("GroupRoleLinks");

                    b.Navigation("MailRecipients");

                    b.Navigation("ReportGroupsMemberships");

                    b.Navigation("StarredGroups");

                    b.Navigation("UserGroupsMemberships");
                });

            modelBuilder.Entity("Atlas_Web.Models.UserRole", b =>
                {
                    b.Navigation("GroupRoleLinks");

                    b.Navigation("RolePermissionLinks");

                    b.Navigation("UserRoleLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
